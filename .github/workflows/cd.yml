name: "Continuous Delivery"

on:
  push:
    branches:
      - master

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  BUILD_CONFIGURATION: "Release"
  DOTNET_FRAMEWORK: "net7.0"
  IS_PRERELEASE: "true"
  NUGET_PACKAGES_SOURCE_NAME: "nuget.org"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0 # Avoid shallow clone so NBGV can do its work.

      # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
      - name: Set version
        uses: aarnott/nbgv@master
        with:
          setAllVars: true

      - name: CI
        uses: addnab/docker-run-action@v3
        with:
          image: flabit/dotnet-pipeline:0.1
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.io
          options: -v ${{ github.workspace }}:/build/source -e SOLUTION_FILE=./FlabIt.Guardians.sln -e CONFIGURATION=${{ env.BUILD_CONFIGURATION }} -e FRAMEWORK=${{ env.DOTNET_FRAMEWORK }}
          run: |
            sh /scripts/.docker-build/run_full_pipeline.sh

      - name: Compress artifacts
        run: |
          tar -cf artifacts.tar ./src/FlabIt.Guardians/bin/**/*.nupkg

      - name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: FlabIt.Guardians v${{ env.NBGV_AssemblyInformationalVersion }}
          path: "./artifacts.tar"

      - name: Code Coverage reports
        uses: actions/upload-artifact@v1
        with:
          name: Coverage Report v${{ env.NBGV_AssemblyInformationalVersion }}
          path: "./test-results/coveragereport.tar.gz"

      - name: Publish NuGet package(s)
        run: dotnet nuget push **/*.nupkg --source ${{ env.NUGET_PACKAGES_SOURCE_NAME }} --api-key ${{ secrets.NUGET_PACKAGES_SOURCE_TOKEN }} --skip-duplicate

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NBGV_SimpleVersion }}
          release_name: Release v${{ env.NBGV_SimpleVersion }}
          draft: true
          prerelease: "{{ env.IS_PRERELEASE }}"
